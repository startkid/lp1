package dyp;

import java.util.Scanner;

class Process {
    int pid;
    int waitingTime;
    int arrivalTime;
    int burstTime;
    int turnAroundTime;
    int timeToComplete;
    int completionTime = 0;
    int priority;

    Process(int pid, int arrival, int burst) {
        this.pid = pid;
        this.arrivalTime = arrival;
        this.burstTime = burst;
        this.timeToComplete = burstTime;
    }

    Process(int pid, int arrival, int burst, int priority) {
        this(pid, arrival, burst);
        this.priority = priority;
    }
}

public class SchedulerSJFAndPriority {
    static Scanner s = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("Enter the number of processes:");
        int n = s.nextInt();
        Process[] myProcess = new Process[n];
        for (int i = 0; i < n; i++) {
            System.out.println("Enter Arrival time, Burst Time, and Priority: ");
            int arrival = s.nextInt();
            int burst = s.nextInt();
            int priority = s.nextInt();
            myProcess[i] = new Process(i + 1, arrival, burst, priority);
        }

        System.out.println("Select the scheduling algorithm:");
        System.out.println("1. SJF (Preemptive)");
        System.out.println("2. Priority (Non-Preemptive)");
        int choice = s.nextInt();

        if (choice == 1) {
            SJF(myProcess);
        } else if (choice == 2) {
            PriorityScheduling(myProcess);
        } else {
            System.out.println("Incorrect choice");
        }
    }

    static void SJF(Process[] myProcess) {
        int curTimeInterval = 0, completedProcesses = 0;

        while (completedProcesses < myProcess.length) {
            Process curProcess = null;
            for (Process p : myProcess) {
                if (p.arrivalTime <= curTimeInterval && p.timeToComplete > 0) {
                    if (curProcess == null || p.timeToComplete < curProcess.timeToComplete) {
                        curProcess = p;
                    }
                }
            }
            if (curProcess != null) {
                curProcess.timeToComplete--;
                curTimeInterval++;
                if (curProcess.timeToComplete == 0) {
                    curProcess.completionTime = curTimeInterval;
                    curProcess.turnAroundTime = curProcess.completionTime - curProcess.arrivalTime;
                    curProcess.waitingTime = curProcess.turnAroundTime - curProcess.burstTime;
                    completedProcesses++;
                }
            } else {
                curTimeInterval++;
            }
        }

        printResults(myProcess);
    }

    static void PriorityScheduling(Process[] myProcess) {
        Process temp;
        for (int i = 0; i < myProcess.length; i++) {
            for (int j = i; j < myProcess.length; j++) {
                if (myProcess[i].priority > myProcess[j].priority) {
                    temp = myProcess[j];
                    myProcess[j] = myProcess[i];
                    myProcess[i] = temp;
                }
            }
        }

        int time = 0;
        for (Process p : myProcess) {
            time += p.burstTime;
            p.completionTime = time;
            p.turnAroundTime = p.completionTime - p.arrivalTime;
            p.waitingTime = p.turnAroundTime - p.burstTime;
        }

        printResults(myProcess);
    }

    static void printResults(Process[] myProcess) {
        for (Process p : myProcess) {
            System.out.println("Process " + p.pid + ":");
            System.out.println("Turnaround Time: " + p.turnAroundTime);
            System.out.println("Completion Time: " + p.completionTime);
            System.out.println("Waiting Time: " + p.waitingTime);
        }
    }
}

