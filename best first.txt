package dyp;

public class BestFitFirstFit {

    // Best Fit Allocation
    static void bestFit(int blockSize[], int m, int processSize[], int n) {
        int allocation[] = new int[n];
        for (int i = 0; i < allocation.length; i++) allocation[i] = -1;
        
        for (int i = 0; i < n; i++) {
            int bestIdx = -1;
            for (int j = 0; j < m; j++) {
                if (blockSize[j] >= processSize[i]) {
                    if (bestIdx == -1 || blockSize[bestIdx] > blockSize[j]) bestIdx = j;
                }
            }
            if (bestIdx != -1) {
                allocation[i] = bestIdx;
                blockSize[bestIdx] -= processSize[i];
            }
        }
        displayResult("Best Fit", allocation, processSize);
    }

    // First Fit Allocation
    static void firstFit(int blockSize[], int m, int processSize[], int n) {
        int allocation[] = new int[n];
        for (int i = 0; i < allocation.length; i++) allocation[i] = -1;
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (blockSize[j] >= processSize[i]) {
                    allocation[i] = j;
                    blockSize[j] -= processSize[i];
                    break;
                }
            }
        }
        displayResult("First Fit", allocation, processSize);
    }

    static void displayResult(String method, int[] allocation, int[] processSize) {
        System.out.println("\n" + method + " Allocation:");
        System.out.println("Process No.\tProcess Size\tBlock no.");
        for (int i = 0; i < allocation.length; i++) {
            System.out.print(" " + (i+1) + "\t\t" + processSize[i] + "\t\t");
            System.out.println(allocation[i] != -1 ? (allocation[i] + 1) : "Not Allocated");
        }
    }

    public static void main(String[] args) {
        int blockSize[] = {100, 500, 200, 300, 600};
        int processSize[] = {212, 417, 112, 426};
        int m = blockSize.length;
        int n = processSize.length;

        bestFit(blockSize.clone(), m, processSize, n);
        firstFit(blockSize.clone(), m, processSize, n);
    }
}
