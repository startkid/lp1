package dyp;


import java.util.Scanner;

class ProcessPriority {
    int pid;
    int arrivalTime;
    int burstTime;
    int priority;
    int waitingTime;
    int turnAroundTime;
    int completionTime = 0;
    int timeToComplete;

    ProcessPriority(int pid, int arrival, int burst, int priority) {
        this.pid = pid;
        this.arrivalTime = arrival;
        this.burstTime = burst;
        this.priority = priority;
        this.timeToComplete = burst;
    }
}

public class Priority_RoundRobin {
    static Scanner s = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("Name: Ainakshi Jivan Hore    Roll No: TACO22103");

        System.out.println("Enter the number of processes:");
        int n = s.nextInt();
        ProcessPriority[] processes = new ProcessPriority[n];
        for (int i = 0; i < n; i++) {
            System.out.println("Enter Arrival Time, Burst Time, and Priority for Process " + (i + 1) + ":");
            int arrival = s.nextInt();
            int burst = s.nextInt();
            int priority = s.nextInt();
            processes[i] = new ProcessPriority(i + 1, arrival, burst, priority);
        }

        System.out.println("Choose the Scheduling Algorithm:");
        System.out.println("1. Priority (Non-preemptive)");
        System.out.println("2. Round Robin (Preemptive)");
        int choice = s.nextInt();

        switch (choice) {
            case 1:
                PriorityScheduling(processes);
                break;
            case 2:
                RoundRobin(processes);
                break;
            default:
                System.out.println("Invalid Choice");
        }
        s.close();
    }

    static void PriorityScheduling(ProcessPriority[] processes) {
        int time = 0;
        for (ProcessPriority p : processes) {
            for (int j = 0; j < processes.length; j++) {
                if (processes[j].arrivalTime <= time && processes[j].timeToComplete > 0 &&
                    (p.timeToComplete == 0 || processes[j].priority < p.priority)) {
                    p = processes[j];
                }
            }
            time += p.burstTime;
            p.completionTime = time;
            p.turnAroundTime = p.completionTime - p.arrivalTime;
            p.waitingTime = p.turnAroundTime - p.burstTime;
            displayProcess(p);
        }
    }

    static void RoundRobin(ProcessPriority[] processes) {
        System.out.println("Enter Time Quantum:");
        int quantum = s.nextInt();
        int currentTime = 0, completed = 0;

        while (completed < processes.length) {
            for (ProcessPriority p : processes) {
                if (p.timeToComplete > 0) {
                    if (p.timeToComplete > quantum) {
                        currentTime += quantum;
                        p.timeToComplete -= quantum;
                    } else {
                        currentTime += p.timeToComplete;
                        p.timeToComplete = 0;
                        p.completionTime = currentTime;
                        p.turnAroundTime = p.completionTime - p.arrivalTime;
                        p.waitingTime = p.turnAroundTime - p.burstTime;
                        completed++;
                    }
                    displayProcess(p);
                }
            }
        }
    }

    static void displayProcess(ProcessPriority p) {
        System.out.println("Process " + p.pid + ":");
        System.out.println("Turnaround Time: " + p.turnAroundTime + "\tCompletion Time: " + p.completionTime + "\tWaiting Time: " + p.waitingTime);
    }
}

